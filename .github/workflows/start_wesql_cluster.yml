name: Start WeSQL Cluster

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: "0 */4 * * *"

concurrency:
  group: format('{0}-{1}', ${{ github.ref }}, 'Cluster (start_wesql_cluster)')
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.WESQL_OBJECTSTORE_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.WESQL_OBJECTSTORE_SECRET_KEY }}
          aws configure set default.region ${{ secrets.WESQL_OBJECTSTORE_REGION }}

#      - name: Create S3 Bucket
#        id: create_bucket
#        run: |
#          BUCKET_NAME="wescale-$(date +'%Y%m%d%H%M%S')"
#          echo "Bucket name: $BUCKET_NAME"
#          aws s3 mb s3://$BUCKET_NAME
#          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT

      - name: Start WeSQL Server
        run: |
          export WESQL_OBJECTSTORE_BUCKET=${{ secrets.WESQL_OBJECTSTORE_BUCKET }}
          export WESQL_OBJECTSTORE_REGION=${{ secrets.WESQL_OBJECTSTORE_REGION }}
          export WESQL_OBJECTSTORE_ACCESS_KEY=${{ secrets.WESQL_OBJECTSTORE_ACCESS_KEY }}
          export WESQL_OBJECTSTORE_SECRET_KEY=${{ secrets.WESQL_OBJECTSTORE_SECRET_KEY }}

          docker run -itd --network host --name wesql-server \
            -p 3306:3306 \
            -e MYSQL_CUSTOM_CONFIG="[mysqld]\n\
            port=3306\n\
            log-bin=binlog\n\
            gtid_mode=ON\n\
            enforce_gtid_consistency=ON\n\
            log_slave_updates=ON\n\
            binlog_format=ROW\n\
            objectstore_provider='aws'\n\
            repo_objectstore_id='tutorial'\n\
            objectstore_bucket='${WESQL_OBJECTSTORE_BUCKET}'\n\
            objectstore_region='${WESQL_OBJECTSTORE_REGION}'\n\
            branch_objectstore_id='main'" \
            -v ~/wesql-local-dir:/data/mysql \
            -e WESQL_CLUSTER_MEMBER='127.0.0.1:13306' \
            -e MYSQL_ROOT_PASSWORD=passwd \
            -e WESQL_OBJECTSTORE_ACCESS_KEY=${WESQL_OBJECTSTORE_ACCESS_KEY} \
            -e WESQL_OBJECTSTORE_SECRET_KEY=${WESQL_OBJECTSTORE_SECRET_KEY} \
            apecloud/wesql-server:8.0.35-0.1.0_beta3.38

      - name: Wait for MySQL ports
        run: |
          timeout=300  # 5 minutes timeout
          start_time=$(date +%s)
          while ! nc -z localhost 3306; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -ge $timeout ]; then
              echo "Timeout waiting for MySQL port 3306"
              exit 1
            fi
            echo "Port 3306 not ready. Retrying in 5 seconds..."
            sleep 5
          done
          echo "MySQL port 3306 is ready!"

#      - name: Setup SSH tunnel via serveo
#        run: |
#          # 使用 serveo 将本地 3306 随机映射到外网
#          # -R 0:localhost:3306 表示在 serveo 上随机分配端口对外服务
#          nohup ssh -o StrictHostKeyChecking=no -R 0:localhost:3306 serveo.net > serveo.log 2>&1 &
#          sleep 5
#          echo "Serveo log output:"
#          cat serveo.log || true
#
#      - name: Print Serveo Tunnel
#        run: |
#          TUNNEL_LINE=$(grep 'Forwarding TCP' serveo.log || true)
#          if [ -z "$TUNNEL_LINE" ]; then
#            echo "No forwarding line found in serveo.log"
#            exit 1
#          fi
#          echo "$TUNNEL_LINE"
#          HOST="serveo.net"
#          # 去除可能的回车和末尾空白后提取端口
#          PORT=$(echo "$TUNNEL_LINE" | tr -d '\r' | sed 's/[[:space:]]*$//' | grep -oE '[0-9]+$' || true)
#          if [ -z "$PORT" ]; then
#            echo "No port found in TUNNEL_LINE"
#            echo "Debug line (od):"
#            echo "$TUNNEL_LINE" | od -c
#            exit 1
#          fi
#          echo "MySQL Public Access:"
#          echo "Host: $HOST"
#          echo "Port: $PORT"
#          echo "Connect: mysql -h $HOST -P $PORT -u root -ppasswd"
#          echo "Password: passwd"

      - name: Install and Start ngrok
        run: |
          # 安装ngrok
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /usr/share/keyrings/ngrok-archive-keyring.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt-get update && sudo apt-get install ngrok -y

          # 配置ngrok token
          ngrok config add-authtoken 2nauO5aVlhxpLxgPcgG92D5WKM8_6fqhSn1XogXRzChjvCBLz

          # 后台启动ngrok tcp隧道
          nohup ngrok tcp 3306 > ngrok.log 2>&1 &
          sleep 5

      - name: Print ngrok tunnel info
        run: |
          # 查看ngrok提供的隧道信息
          curl -s http://127.0.0.1:4040/api/tunnels > tunnels.json
          cat tunnels.json
          # 提取 public_url（如 "tcp://0.tcp.ngrok.io:xxxxx"）
          TUNNEL_URL=$(jq -r '.tunnels[0].public_url' tunnels.json)
          echo "Public MySQL Tunnel URL: $TUNNEL_URL"
          # 分解为 host 和 port
          HOST=$(echo $TUNNEL_URL | sed 's|tcp://||' | cut -d':' -f1)
          PORT=$(echo $TUNNEL_URL | sed 's|tcp://||' | cut -d':' -f2)
          echo "MySQL Public Access:"
          echo "Host: $HOST"
          echo "Port: $PORT"
          echo "Connect: mysql -h $HOST -P $PORT -u root -ppasswd"
          echo "Password: passwd"

      - name: Keep session running
        run: |
          echo "Press Ctrl+C or cancel the workflow run when done testing."
          tail -f /dev/null

#      - name: Clean up
#        if: always()
#        run: |
#          docker stop wesql-server
#          echo "Deleting bucket: ${{ steps.create_bucket.outputs.bucket_name }}"
#          aws s3 rm s3://${{ steps.create_bucket.outputs.bucket_name }} --recursive
#          aws s3 rb s3://${{ steps.create_bucket.outputs.bucket_name }}